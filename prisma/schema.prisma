

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id            Int      @id @default(autoincrement())
  username      String      @unique
  email         String      @unique
  password      String
  profile       Profile?
  skills        Skill[]
  requests      Request[]
  participant1  Rooms[]     @relation("participant1")
  participant2  Rooms[]     @relation("participant2")
  conversations Conversation[] @relation("participants")
  sentMessages     Message[]   @relation("sender") 
  receivedMessages Message[]   @relation("Seen") 
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}

model Profile {
  id           Int      @id @default(autoincrement())
  RealName     String
  profilePhoto String   @db.Text
  birthdate    String
  contacts     String
  Bio          String   @db.VarChar(255)
  userId       Int   @unique
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model Skill {
  id          Int      @id @default(autoincrement())
  skillName   String
  description String   @db.VarChar(255)
  Proficiency String
  userId      Int  
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Request {
  id          Int      @id @default(autoincrement())
  skillName   String
  description String   @db.VarChar(255)
  userId      Int   
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Rooms {
  id              String   @id @default(uuid())
  participant1id Int  
  participant1   User     @relation("participant1", fields: [participant1id], references: [id])

  participant2id Int 
  participant2   User     @relation("participant2", fields: [participant2id], references: [id])

  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model Conversation {
  id             String      @id @default(uuid()) @map("_id") 
  createdAt      DateTime    @default(now())
  lastMessageAt  DateTime    @default(now())
  name           String?
  
  messages       Message[]
  
  participants   User[]      @relation("participants")
  updatedAt      DateTime    @updatedAt
}

model Message {
  id             String      @id @default(uuid()) @map("_id") 
  body           String?
  image          String?
  createdAt      DateTime    @default(now())

  seenId          Int
  seen           User        @relation("Seen", fields: [seenId], references: [id])

  conversationId String     
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  
  senderId       Int     
  sender         User        @relation("sender",fields: [senderId], references: [id], onDelete: Cascade)
}
